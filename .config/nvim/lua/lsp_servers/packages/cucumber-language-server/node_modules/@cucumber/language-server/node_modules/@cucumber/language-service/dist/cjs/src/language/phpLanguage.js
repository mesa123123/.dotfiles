"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.phpLanguage = void 0;
exports.phpLanguage = {
    toParameterTypeName: function () {
        throw new Error('Unsupported operation');
    },
    toParameterTypeRegExps: function () {
        throw new Error('Unsupported operation');
    },
    toStepDefinitionExpression: function (node) {
        // match multiline comment
        var text = node.text;
        var match = text.match(/^(\/\*\*[\s*]*)([\s\S]*)(\n[\s]*\*\/)/);
        if (!match)
            throw new Error("Could not match ".concat(text));
        return new RegExp(match[2].replace(/@(Given |When |Then )/, '').trim());
    },
    // Empty array because Behat does not support Cucumber Expressions
    defineParameterTypeQueries: [],
    defineStepDefinitionQueries: [
        "\n(\n  (comment)+ @expression\n  (#match? @expression \"Given|When|Then\")\n) @root\n",
    ],
    snippetParameters: {
        int: { type: 'int', name: 'i' },
        float: { type: 'float', name: 'f' },
        word: { type: 'string' },
        string: { type: 'string', name: 's' },
        double: { type: 'float', name: 'd' },
        bigdecimal: { type: 'string', name: 'bigDecimal' },
        byte: { type: 'int', name: 'b' },
        short: { type: 'int', name: 's' },
        long: { type: 'int', name: 'l' },
        biginteger: { type: 'int', name: 'bigInteger' },
        '': { type: 'Object', name: 'arg' },
    },
    defaultSnippetTemplate: "\n    /**\n     * {{ keyword }} {{ expression }}\n     */\n    public function {{ #camelize }}{{ expression }}{{ /camelize }}({{ #parameters }}{{ #seenParameter }}, {{ /seenParameter }}{{ name }}{{ /parameters }})\n    {\n        // {{ blurb }}\n    }\n",
};
//# sourceMappingURL=phpLanguage.js.map