import { Expression, ParameterType, ParameterTypeRegistry, StringOrRegExp } from '@cucumber/cucumber-expressions';
import { RegExps } from '@cucumber/cucumber-expressions/dist/cjs/src/ParameterType';
import { DocumentUri, LocationLink } from 'vscode-languageserver-types';
export declare type ParameterTypeName = 'int' | 'float' | 'word' | 'string' | 'double' | 'bigdecimal' | 'byte' | 'short' | 'long' | 'biginteger' | '';
/**
 * Used to generate step definition snippets
 */
export declare type SnippetParameter = Readonly<{
    /**
     * The name to use for the parameter.
     */
    name?: string;
    type: string;
}>;
export declare type SnippetParameters = Readonly<Record<ParameterTypeName, SnippetParameter>>;
export declare type ParameterTypeMeta = Readonly<{
    name: string;
    regexp: string;
}>;
export declare const LanguageNames: readonly ["java", "tsx", "c_sharp", "php", "python", "ruby", "rust"];
export declare type LanguageName = typeof LanguageNames[number];
export declare type Source<L> = Readonly<{
    readonly languageName: L;
    readonly uri: DocumentUri;
    readonly content: string;
}>;
export declare type Language = Readonly<{
    toParameterTypeName(node: TreeSitterSyntaxNode): string;
    toParameterTypeRegExps(node: TreeSitterSyntaxNode | null): RegExps;
    toStepDefinitionExpression(node: TreeSitterSyntaxNode): StringOrRegExp;
    readonly defineParameterTypeQueries: readonly string[];
    readonly defineStepDefinitionQueries: readonly string[];
    readonly defaultSnippetTemplate: string;
    readonly snippetParameters: SnippetParameters;
}>;
export declare type ExpressionBuilderResult = Readonly<{
    readonly expressionLinks: readonly ExpressionLink[];
    readonly parameterTypeLinks: readonly ParameterTypeLink[];
    readonly errors: readonly Error[];
    readonly registry: ParameterTypeRegistry;
}>;
export declare type Link = Readonly<{
    locationLink: LocationLink;
}>;
export declare type ExpressionLink = Link & Readonly<{
    expression: Expression;
}>;
export declare type ParameterTypeLink = Link & Readonly<{
    parameterType: ParameterType<unknown>;
}>;
export declare type NodePredicate = (node: TreeSitterSyntaxNode) => boolean;
/**
 * The Node.js and Web bindings have slightly different APIs. We hide this difference behind this interface.
 * https://github.com/tree-sitter/node-tree-sitter/issues/68
 */
export interface ParserAdapter {
    readonly parser: TreeSitterParser;
    init(): Promise<void>;
    setLanguageName(languageName: LanguageName): void;
    query(source: string): TreeSitterQuery;
}
export interface TreeSitterParser {
    parse(input: string): TreeSitterTree;
}
export declare type TreeSitterTree = Readonly<{
    rootNode: TreeSitterSyntaxNode;
}>;
export interface TreeSitterQuery {
    matches(node: TreeSitterSyntaxNode): readonly TreeSitterQueryMatch[];
}
export declare type TreeSitterSyntaxNode = Readonly<{
    type: string;
    text: string;
    children: readonly TreeSitterSyntaxNode[];
    startPosition: TreeSitterPosition;
    endPosition: TreeSitterPosition;
}>;
export declare type TreeSitterQueryMatch = Readonly<{
    captures: readonly TreeSitterCapture[];
}>;
export declare type TreeSitterCapture = Readonly<{
    name: string;
    node: TreeSitterSyntaxNode;
}>;
export declare type TreeSitterPosition = Readonly<{
    row: number;
    column: number;
}>;
//# sourceMappingURL=types.d.ts.map