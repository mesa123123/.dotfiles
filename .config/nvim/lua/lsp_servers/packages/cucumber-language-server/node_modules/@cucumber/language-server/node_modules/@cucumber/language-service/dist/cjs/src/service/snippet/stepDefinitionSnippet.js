"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stepDefinitionSnippet = void 0;
var mustache_1 = __importDefault(require("mustache"));
function toWords(expression) {
    return expression
        .replace(/{[^}]*}/g, ' ')
        .replace(/[^a-zA-Z_]+/g, ' ')
        .trim()
        .split(/\s+/);
}
var camelize = function () { return function (text, render) {
    return toWords(render(text))
        .map(function (word, i) { return (i === 0 ? word.toLowerCase() : word[0].toUpperCase() + word.slice(1)); })
        .join('');
}; };
var underscore = function () { return function (text, render) {
    return toWords(render(text))
        .map(function (word, i) { return (i === 0 ? word : "_".concat(word)); })
        .join('');
}; };
var capitalize = function () { return function (text, render) {
    var rendered = render(text);
    return rendered[0].toUpperCase() + rendered.slice(1);
}; };
var lowercase = function () { return function (text, render) {
    var rendered = render(text);
    return rendered[0].toLowerCase() + rendered.slice(1);
}; };
var blurb = 'Write code here that turns the phrase above into concrete actions';
function stepDefinitionSnippet(keyword, generatedExpressions, mustacheTemplate, snippetParameters) {
    // TODO: Add the remaining ones as comments
    var generatedExpression = generatedExpressions[0];
    var _seenParameter = false;
    var context = {
        keyword: keyword.trim(),
        expression: generatedExpression.source,
        parameters: generatedExpression.parameterInfos.map(function (parameterInfo) {
            var snippetParameter = snippetParameters[parameterInfo.name || ''];
            var name = (snippetParameter === null || snippetParameter === void 0 ? void 0 : snippetParameter.name) || parameterInfo.name || snippetParameters[''].name;
            var type = (snippetParameter === null || snippetParameter === void 0 ? void 0 : snippetParameter.type) || parameterInfo.name || snippetParameters[''].type;
            return {
                name: "".concat(name).concat(parameterInfo.count === 1 ? '' : parameterInfo.count.toString()),
                type: type,
            };
        }),
        seenParameter: function () {
            try {
                return _seenParameter;
            }
            finally {
                _seenParameter = true;
            }
        },
        blurb: blurb,
        camelize: camelize,
        underscore: underscore,
        capitalize: capitalize,
        lowercase: lowercase,
    };
    return mustache_1.default.render(mustacheTemplate, context);
}
exports.stepDefinitionSnippet = stepDefinitionSnippet;
//# sourceMappingURL=stepDefinitionSnippet.js.map