var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CucumberLanguageServer_suggestions, _CucumberLanguageServer_files;
import { buildSuggestions, ExpressionBuilder, getGenerateSnippetCodeAction, getGherkinCompletionItems, getGherkinDiagnostics, getGherkinDocumentFeatureSymbol, getGherkinFormattingEdits, getGherkinSemanticTokens, getStepDefinitionLocationLinks, jsSearchIndex, semanticTokenTypes, } from '@cucumber/language-service';
import { CodeActionKind, ConfigurationRequest, DidChangeConfigurationNotification, TextDocumentSyncKind, } from 'vscode-languageserver';
import { buildStepTexts } from './buildStepTexts.js';
import { extname } from './Files.js';
import { getLanguage, loadGherkinSources, loadGlueSources } from './fs.js';
import { getStepDefinitionSnippetLinks } from './getStepDefinitionSnippetLinks.js';
import { version } from './version.js';
// In order to allow 0-config in LSP clients we provide default settings.
// This should be consistent with the `README.md` in `cucumber/vscode` - this is to
// ensure the docs for the plugin reflect the defaults.
const defaultSettings = {
    // IMPORTANT: If you change features or glue below, please also create a PR to update
    // the vscode extension defaults accordingly in https://github.com/cucumber/vscode/blob/main/README.md#extension-settings
    features: [
        // Cucumber-JVM
        'src/test/**/*.feature',
        // Cucumber-Ruby, Cucumber-Js, Behat, Behave
        'features/**/*.feature',
        // Pytest-BDD
        'tests/**/*.feature',
        // SpecFlow
        '*specs*/**/.feature',
    ],
    glue: [
        // Cucumber-JVM
        'src/test/**/*.java',
        // Cucumber-Js
        'features/**/*.ts',
        'features/**/*.tsx',
        // Behave
        'features/**/*.php',
        // Behat
        'features/**/*.py',
        // Pytest-BDD
        'tests/**/*.py',
        // Cucumber Rust
        'tests/**/*.rs',
        'features/**/*.rs',
        // Cucumber-Ruby
        'features/**/*.rb',
        // SpecFlow
        '*specs*/**/.cs',
    ],
    parameterTypes: [],
    snippetTemplates: {},
};
export class CucumberLanguageServer {
    constructor(connection, documents, parserAdapter, makeFiles) {
        this.connection = connection;
        this.documents = documents;
        this.makeFiles = makeFiles;
        this.expressionBuilderResult = undefined;
        _CucumberLanguageServer_suggestions.set(this, void 0);
        _CucumberLanguageServer_files.set(this, void 0);
        this.expressionBuilder = new ExpressionBuilder(parserAdapter);
        connection.onInitialize((params) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            // connection.console.log(`PARAMS: ${JSON.stringify(params, null, 2)}`)
            yield parserAdapter.init();
            if (params.clientInfo) {
                connection.console.info(`Initializing connection from ${params.clientInfo.name} ${params.clientInfo.version}`);
            }
            else {
                connection.console.info(`Initializing connection from unknown client`);
            }
            if (params.rootPath) {
                this.rootUri = `file://${params.rootPath}`;
            }
            else if (params.rootUri) {
                this.rootUri = params.rootUri;
            }
            else if (params.workspaceFolders && params.workspaceFolders.length > 0) {
                this.rootUri = params.workspaceFolders[0].uri;
            }
            else {
                connection.console.error(`Could not determine rootPath`);
            }
            __classPrivateFieldSet(this, _CucumberLanguageServer_files, makeFiles(this.rootUri), "f");
            // Some users have reported that the globs don't find any files. This is to debug that issue
            connection.console.info(`Root uri    : ${this.rootUri}`);
            connection.console.info(`Current dir : ${process.cwd()}`);
            if ((_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.configuration) {
                connection.onDidChangeConfiguration((params) => {
                    this.connection.console.info(`Client sent workspace/configuration`);
                    this.reindex(params.settings).catch((err) => {
                        connection.console.error(`Failed to reindex: ${err.message}`);
                    });
                });
                try {
                    yield connection.client.register(DidChangeConfigurationNotification.type);
                }
                catch (err) {
                    connection.console.info(`Client does not support client/registerCapability. This is OK.`);
                }
            }
            else {
                this.connection.console.info('onDidChangeConfiguration is disabled');
            }
            if ((_c = (_b = params.capabilities.workspace) === null || _b === void 0 ? void 0 : _b.didChangeWatchedFiles) === null || _c === void 0 ? void 0 : _c.dynamicRegistration) {
                connection.onDidChangeWatchedFiles(() => __awaiter(this, void 0, void 0, function* () {
                    connection.console.info(`onDidChangeWatchedFiles`);
                }));
            }
            else {
                connection.console.info('onDidChangeWatchedFiles is disabled');
            }
            if ((_d = params.capabilities.textDocument) === null || _d === void 0 ? void 0 : _d.semanticTokens) {
                connection.languages.semanticTokens.onDelta(() => {
                    return {
                        data: [],
                    };
                });
                connection.languages.semanticTokens.onRange(() => {
                    return {
                        data: [],
                    };
                });
                connection.languages.semanticTokens.on((semanticTokenParams) => {
                    var _a;
                    const doc = documents.get(semanticTokenParams.textDocument.uri);
                    if (!doc)
                        return { data: [] };
                    const gherkinSource = doc.getText();
                    return getGherkinSemanticTokens(gherkinSource, (((_a = this.expressionBuilderResult) === null || _a === void 0 ? void 0 : _a.expressionLinks) || []).map((l) => l.expression));
                });
            }
            else {
                connection.console.info('semanticTokens is disabled');
            }
            if ((_g = (_f = (_e = params.capabilities.textDocument) === null || _e === void 0 ? void 0 : _e.completion) === null || _f === void 0 ? void 0 : _f.completionItem) === null || _g === void 0 ? void 0 : _g.snippetSupport) {
                connection.onCompletion((params) => {
                    if (!this.searchIndex)
                        return [];
                    const doc = documents.get(params.textDocument.uri);
                    if (!doc)
                        return [];
                    const gherkinSource = doc.getText();
                    return getGherkinCompletionItems(gherkinSource, params.position, this.searchIndex).slice();
                });
                connection.onCompletionResolve((item) => item);
            }
            else {
                connection.console.info('onCompletion is disabled');
            }
            if ((_h = params.capabilities.textDocument) === null || _h === void 0 ? void 0 : _h.formatting) {
                connection.onDocumentFormatting((params) => {
                    const doc = documents.get(params.textDocument.uri);
                    if (!doc)
                        return [];
                    const gherkinSource = doc.getText();
                    return getGherkinFormattingEdits(gherkinSource);
                });
            }
            else {
                connection.console.info('onDocumentFormatting is disabled');
            }
            if ((_j = params.capabilities.textDocument) === null || _j === void 0 ? void 0 : _j.codeAction) {
                connection.onCodeAction((params) => __awaiter(this, void 0, void 0, function* () {
                    const diagnostics = params.context.diagnostics;
                    if (this.expressionBuilderResult) {
                        const settings = yield this.getSettings();
                        const links = getStepDefinitionSnippetLinks(this.expressionBuilderResult.expressionLinks.map((l) => l.locationLink));
                        if (links.length === 0) {
                            connection.console.info(`Unable to generate step definition. Please create one first manually.`);
                            return [];
                        }
                        const codeActions = [];
                        for (const link of links) {
                            const languageName = getLanguage(extname(link.targetUri));
                            if (!languageName) {
                                connection.console.info(`Unable to generate step definition snippet for unknown extension ${link}`);
                                return [];
                            }
                            const mustacheTemplate = settings.snippetTemplates[languageName];
                            const createFile = !(yield __classPrivateFieldGet(this, _CucumberLanguageServer_files, "f").exists(link.targetUri));
                            const relativePath = __classPrivateFieldGet(this, _CucumberLanguageServer_files, "f").relativePath(link.targetUri);
                            const codeAction = getGenerateSnippetCodeAction(diagnostics, link, relativePath, createFile, mustacheTemplate, languageName, this.expressionBuilderResult.registry);
                            if (codeAction) {
                                codeActions.push(codeAction);
                            }
                        }
                        return codeActions;
                    }
                    return [];
                }));
            }
            else {
                connection.console.info('onCodeAction is disabled');
            }
            if ((_k = params.capabilities.textDocument) === null || _k === void 0 ? void 0 : _k.definition) {
                connection.onDefinition((params) => {
                    const doc = documents.get(params.textDocument.uri);
                    if (!doc || !this.expressionBuilderResult)
                        return [];
                    const gherkinSource = doc.getText();
                    return getStepDefinitionLocationLinks(gherkinSource, params.position, this.expressionBuilderResult.expressionLinks);
                });
            }
            else {
                connection.console.info('onDefinition is disabled');
            }
            if ((_l = params.capabilities.textDocument) === null || _l === void 0 ? void 0 : _l.documentSymbol) {
                connection.onDocumentSymbol((params) => {
                    const doc = documents.get(params.textDocument.uri);
                    if (!doc)
                        return [];
                    const gherkinSource = doc.getText();
                    const symbol = getGherkinDocumentFeatureSymbol(gherkinSource);
                    return symbol ? [symbol] : null;
                });
            }
            else {
                connection.console.info('onDocumentSymbol is disabled');
            }
            return {
                capabilities: this.capabilities(),
                serverInfo: this.info(),
            };
        }));
        connection.onInitialized(() => {
            connection.console.info(`${this.info().name} ${this.info().version} initialized`);
            this.reindex().catch((err) => connection.console.error(err.message));
        });
        documents.listen(connection);
        // The content of a text document has changed. This event is emitted
        // when the text document is first opened or when its content has changed.
        documents.onDidChangeContent((change) => __awaiter(this, void 0, void 0, function* () {
            this.scheduleReindexing();
            if (change.document.uri.match(/\.feature$/)) {
                yield this.sendDiagnostics(change.document);
            }
        }));
    }
    get suggestions() {
        return __classPrivateFieldGet(this, _CucumberLanguageServer_suggestions, "f");
    }
    capabilities() {
        return {
            textDocumentSync: TextDocumentSyncKind.Incremental,
            completionProvider: {
                resolveProvider: false,
            },
            codeActionProvider: {
                resolveProvider: false,
                workDoneProgress: false,
                codeActionKinds: [CodeActionKind.QuickFix],
            },
            workspace: {
                workspaceFolders: {
                    changeNotifications: true,
                    supported: true,
                },
            },
            semanticTokensProvider: {
                range: false,
                full: {
                    delta: false,
                },
                legend: {
                    tokenTypes: semanticTokenTypes,
                    tokenModifiers: [],
                },
            },
            documentSymbolProvider: {
                label: 'Cucumber',
            },
            documentFormattingProvider: true,
            definitionProvider: true,
        };
    }
    info() {
        return {
            name: 'Cucumber Language Server',
            version,
        };
    }
    sendDiagnostics(textDocument) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const diagnostics = getGherkinDiagnostics(textDocument.getText(), (((_a = this.expressionBuilderResult) === null || _a === void 0 ? void 0 : _a.expressionLinks) || []).map((l) => l.expression));
            yield this.connection.sendDiagnostics({
                uri: textDocument.uri,
                diagnostics,
            });
        });
    }
    scheduleReindexing() {
        clearTimeout(this.reindexingTimeout);
        const timeoutMillis = 3000;
        this.connection.console.info(`Scheduling reindexing in ${timeoutMillis} ms`);
        this.reindexingTimeout = setTimeout(() => {
            this.reindex().catch((err) => this.connection.console.error(`Failed to reindex: ${err.message}`));
        }, timeoutMillis);
    }
    getSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const config = yield this.connection.sendRequest(ConfigurationRequest.type, {
                    items: [
                        {
                            section: 'cucumber',
                        },
                    ],
                });
                if (config && config.length === 1) {
                    const settings = config[0];
                    return {
                        features: getArray(settings === null || settings === void 0 ? void 0 : settings.features, defaultSettings.features),
                        glue: getArray(settings === null || settings === void 0 ? void 0 : settings.glue, defaultSettings.glue),
                        parameterTypes: getArray(settings === null || settings === void 0 ? void 0 : settings.parameterTypes, defaultSettings.parameterTypes),
                        snippetTemplates: {},
                    };
                }
                else {
                    this.connection.console.error(`The client responded with a config we cannot process: ${JSON.stringify(config, null, 2)}`);
                    this.connection.console.error(`Using default settings`);
                    return defaultSettings;
                }
            }
            catch (err) {
                this.connection.console.error(`Failed to request configuration: ${err.message}`);
                this.connection.console.error(`Using default settings`);
                return defaultSettings;
            }
        });
    }
    reindex(settings) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!settings) {
                settings = yield this.getSettings();
            }
            // TODO: Send WorkDoneProgressBegin notification
            // https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#workDoneProgress
            this.connection.console.info(`Reindexing ${this.rootUri}`);
            const gherkinSources = yield loadGherkinSources(__classPrivateFieldGet(this, _CucumberLanguageServer_files, "f"), settings.features);
            this.connection.console.info(`* Found ${gherkinSources.length} feature file(s) in ${JSON.stringify(settings.features)}`);
            const stepTexts = gherkinSources.reduce((prev, gherkinSource) => prev.concat(buildStepTexts(gherkinSource.content)), []);
            this.connection.console.info(`* Found ${stepTexts.length} steps in those feature files`);
            const glueSources = yield loadGlueSources(__classPrivateFieldGet(this, _CucumberLanguageServer_files, "f"), settings.glue);
            this.connection.console.info(`* Found ${glueSources.length} glue file(s) in ${JSON.stringify(settings.glue)}`);
            this.expressionBuilderResult = this.expressionBuilder.build(glueSources, settings.parameterTypes);
            this.connection.console.info(`* Found ${this.expressionBuilderResult.parameterTypeLinks.length} parameter types in those glue files`);
            for (const parameterTypeLink of this.expressionBuilderResult.parameterTypeLinks) {
                this.connection.console.info(`  * {${parameterTypeLink.parameterType.name}} = ${parameterTypeLink.parameterType.regexpStrings}`);
            }
            this.connection.console.info(`* Found ${this.expressionBuilderResult.expressionLinks.length} step definitions in those glue files`);
            for (const error of this.expressionBuilderResult.errors) {
                this.connection.console.error(`* Step Definition errors: ${error.stack}`);
            }
            // Send diagnostics for all documents now that we're updated
            const gherkinDocuments = this.documents.all().filter((doc) => doc.uri.match(/\.feature$/));
            yield Promise.all(gherkinDocuments.map((doc) => this.sendDiagnostics(doc).catch((err) => this.connection.console.error(`Error: ${err.message}`))));
            // Tell the client to update all semantic tokens
            this.connection.languages.semanticTokens.refresh();
            try {
                __classPrivateFieldSet(this, _CucumberLanguageServer_suggestions, buildSuggestions(this.expressionBuilderResult.registry, stepTexts, this.expressionBuilderResult.expressionLinks.map((l) => l.expression)), "f");
                this.connection.console.info(`* Built ${__classPrivateFieldGet(this, _CucumberLanguageServer_suggestions, "f").length} suggestions for auto complete`);
                this.searchIndex = jsSearchIndex(__classPrivateFieldGet(this, _CucumberLanguageServer_suggestions, "f"));
            }
            catch (err) {
                this.connection.console.error(err.stack);
                this.connection.console.error('Please report an issue at https://github.com/cucumber/language-service/issues with the above stack trace');
            }
            // TODO: Send WorkDoneProgressEnd notification
        });
    }
}
_CucumberLanguageServer_suggestions = new WeakMap(), _CucumberLanguageServer_files = new WeakMap();
function getArray(arr, defaultArr) {
    if (!Array.isArray(arr) || arr.length === 0)
        return defaultArr;
    return arr;
}
//# sourceMappingURL=CucumberLanguageServer.js.map