import { StringOrRegExp } from '@cucumber/cucumber-expressions';
import { Language, LanguageName, ParameterTypeLink, ParserAdapter, Source, TreeSitterQueryMatch, TreeSitterSyntaxNode } from './types.js';
export declare type GetQueryStrings = (language: Language) => readonly string[];
export declare type SourceMatch = {
    source: Source<LanguageName>;
    match: TreeSitterQueryMatch;
};
export declare const NO_EXPRESSION = "";
export declare class SourceAnalyzer {
    private readonly parserAdapter;
    private readonly sources;
    private readonly errors;
    private readonly treeByContent;
    constructor(parserAdapter: ParserAdapter, sources: readonly Source<LanguageName>[]);
    eachParameterTypeLink(callback: (parameterTypeLink: ParameterTypeLink) => void): void;
    eachStepDefinitionExpression(callback: (stepDefinitionExpression: StringOrRegExp, rootNode: TreeSitterSyntaxNode, expressionNode: TreeSitterSyntaxNode, source: Source<LanguageName>) => void): void;
    private getSourceMatches;
    getErrors(): readonly Error[];
    private parse;
}
//# sourceMappingURL=SourceAnalyzer.d.ts.map