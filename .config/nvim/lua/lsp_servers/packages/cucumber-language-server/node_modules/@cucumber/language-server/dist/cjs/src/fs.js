"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findUris = exports.loadGherkinSources = exports.getLanguage = exports.loadGlueSources = exports.glueExtByLanguageName = void 0;
const Files_js_1 = require("./Files.js");
exports.glueExtByLanguageName = {
    tsx: ['.ts', '.tsx'],
    java: ['.java'],
    c_sharp: ['.cs'],
    php: ['.php'],
    ruby: ['.rb'],
    python: ['.py'],
    rust: ['.rs'],
};
const entries = Object.entries(exports.glueExtByLanguageName).reduce((prev, entry) => {
    const newEntries = entry[1].map((ext) => [ext, entry[0]]);
    return prev.concat(newEntries);
}, []);
const glueLanguageNameByExt = Object.fromEntries(entries);
const glueExtensions = new Set(Object.keys(glueLanguageNameByExt));
function loadGlueSources(files, globs) {
    return __awaiter(this, void 0, void 0, function* () {
        return loadSources(files, globs, glueExtensions, glueLanguageNameByExt);
    });
}
exports.loadGlueSources = loadGlueSources;
function getLanguage(ext) {
    return glueLanguageNameByExt[ext];
}
exports.getLanguage = getLanguage;
function loadGherkinSources(files, globs) {
    return __awaiter(this, void 0, void 0, function* () {
        return loadSources(files, globs, new Set(['.feature']), { '.feature': 'gherkin' });
    });
}
exports.loadGherkinSources = loadGherkinSources;
function findUris(files, globs) {
    return __awaiter(this, void 0, void 0, function* () {
        // Run all the globs in parallel
        const urisPromises = globs.reduce((prev, glob) => {
            const urisPromise = files.findUris(glob);
            return prev.concat(urisPromise);
        }, []);
        const uriArrays = yield Promise.all(urisPromises);
        // Flatten them all
        const uris = uriArrays.flatMap((paths) => paths);
        return [...new Set(uris).values()].sort();
    });
}
exports.findUris = findUris;
function loadSources(files, globs, extensions, languageNameByExt) {
    return __awaiter(this, void 0, void 0, function* () {
        const uris = yield findUris(files, globs);
        return Promise.all(uris
            .filter((uri) => extensions.has((0, Files_js_1.extname)(uri)))
            .map((uri) => new Promise((resolve) => {
            const languageName = languageNameByExt[(0, Files_js_1.extname)(uri)];
            return files.readFile(uri).then((content) => resolve({
                languageName,
                content,
                uri,
            }));
        })));
    });
}
//# sourceMappingURL=fs.js.map