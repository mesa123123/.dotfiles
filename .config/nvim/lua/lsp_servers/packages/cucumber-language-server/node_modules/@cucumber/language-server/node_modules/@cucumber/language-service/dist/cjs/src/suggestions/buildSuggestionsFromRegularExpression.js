"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSuggestionsFromRegularExpression = void 0;
function buildSuggestionsFromRegularExpression(expression, registry, stepTexts, parameterChoices) {
    var e_1, _a;
    var segmentJsons = new Set();
    try {
        for (var stepTexts_1 = __values(stepTexts), stepTexts_1_1 = stepTexts_1.next(); !stepTexts_1_1.done; stepTexts_1_1 = stepTexts_1.next()) {
            var text = stepTexts_1_1.value;
            var args = expression.match(text);
            if (args) {
                var parameterTypes = args.map(function (arg) { return arg.getParameterType(); });
                var segments = [];
                var index = 0;
                for (var argIndex = 0; argIndex < args.length; argIndex++) {
                    var arg = args[argIndex];
                    var textSegment = text.substring(index, arg.group.start);
                    segments.push(textSegment);
                    var parameterType = parameterTypes[argIndex];
                    var key = parameterType.regexpStrings.join('|');
                    var parameterSegment = parameterChoices[key] || ['...'];
                    segments.push(parameterSegment);
                    if (arg.group.end !== undefined)
                        index = arg.group.end;
                }
                var lastSegment = text.substring(index);
                if (lastSegment !== '') {
                    segments.push(lastSegment);
                }
                segmentJsons.add(JSON.stringify(segments));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (stepTexts_1_1 && !stepTexts_1_1.done && (_a = stepTexts_1.return)) _a.call(stepTexts_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return __spreadArray([], __read(segmentJsons), false).sort().map(function (s, n) { return ({
        segments: JSON.parse(s),
        label: n == 0 ? expression.source : "".concat(expression.source, " (").concat(n + 1, ")"),
        matched: true,
    }); });
}
exports.buildSuggestionsFromRegularExpression = buildSuggestionsFromRegularExpression;
//# sourceMappingURL=buildSuggestionsFromRegularExpression.js.map