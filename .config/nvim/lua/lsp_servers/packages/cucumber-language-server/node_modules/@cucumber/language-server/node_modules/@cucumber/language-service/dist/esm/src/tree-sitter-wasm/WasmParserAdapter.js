var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import WasmParser from 'web-tree-sitter';
import { LanguageNames } from '../language/types.js';
export class WasmParserAdapter {
    constructor(wasmBaseUrl) {
        this.wasmBaseUrl = wasmBaseUrl;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            yield WasmParser.init();
            this.parser = new WasmParser();
            const languages = yield Promise.all(LanguageNames.map((languageName) => {
                const wasmUrl = `${this.wasmBaseUrl}/${languageName}.wasm`;
                try {
                    return WasmParser.Language.load(wasmUrl);
                }
                catch (err) {
                    console.error(`Failed to load ${wasmUrl}: ${err.message}`);
                }
            }));
            // @ts-ignore
            this.languages = Object.fromEntries(LanguageNames.map((languageName, i) => [languageName, languages[i]]));
        });
    }
    query(source) {
        return this.parser.getLanguage().query(source);
    }
    setLanguageName(languageName) {
        this.parser.setLanguage(this.languages[languageName]);
    }
}
//# sourceMappingURL=WasmParserAdapter.js.map