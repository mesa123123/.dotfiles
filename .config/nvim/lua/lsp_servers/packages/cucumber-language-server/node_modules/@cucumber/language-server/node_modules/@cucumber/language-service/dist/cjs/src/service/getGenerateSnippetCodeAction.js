"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGenerateSnippetCodeAction = void 0;
var cucumber_expressions_1 = require("@cucumber/cucumber-expressions");
var vscode_languageserver_types_1 = require("vscode-languageserver-types");
var languages_js_1 = require("../language/languages.js");
var constants_js_1 = require("./constants.js");
var stepDefinitionSnippet_js_1 = require("./snippet/stepDefinitionSnippet.js");
/**
 * Generates LSP code actions for inserting a new Step Definition snippet
 *
 * @param diagnostics all the diagnostics
 * @param link where the snippet should be added
 * @param relativePath the relative path from the workspace root
 * @param createFile true if link.targetUri does not exist
 * @param mustacheTemplate template to generae the snippet
 * @param languageName the name of the language we're generating for
 * @param registry parameter types
 */
function getGenerateSnippetCodeAction(diagnostics, link, relativePath, createFile, mustacheTemplate, languageName, registry) {
    var _a, _b;
    var undefinedStepDiagnostic = diagnostics.find(function (d) { return d.code === constants_js_1.diagnosticCodeUndefinedStep; });
    var language = (0, languages_js_1.getLanguage)(languageName);
    var snippetKeyword = (_a = undefinedStepDiagnostic === null || undefinedStepDiagnostic === void 0 ? void 0 : undefinedStepDiagnostic.data) === null || _a === void 0 ? void 0 : _a.snippetKeyword;
    var stepText = (_b = undefinedStepDiagnostic === null || undefinedStepDiagnostic === void 0 ? void 0 : undefinedStepDiagnostic.data) === null || _b === void 0 ? void 0 : _b.stepText;
    if (!undefinedStepDiagnostic || !stepText) {
        return null;
    }
    var generator = new cucumber_expressions_1.CucumberExpressionGenerator(function () { return registry.parameterTypes; });
    var generatedExpressions = generator.generateExpressions(stepText);
    var snippet = (0, stepDefinitionSnippet_js_1.stepDefinitionSnippet)(snippetKeyword, generatedExpressions, mustacheTemplate || language.defaultSnippetTemplate, language.snippetParameters);
    var documentChanges = [];
    if (createFile) {
        documentChanges.push(vscode_languageserver_types_1.CreateFile.create(link.targetUri, {
            ignoreIfExists: true,
            overwrite: true,
        }));
    }
    documentChanges.push(vscode_languageserver_types_1.TextDocumentEdit.create(vscode_languageserver_types_1.VersionedTextDocumentIdentifier.create(link.targetUri, 0), [
        vscode_languageserver_types_1.TextEdit.replace(link.targetRange, snippet),
    ]));
    return {
        title: "Define in ".concat(relativePath),
        diagnostics: [undefinedStepDiagnostic],
        kind: vscode_languageserver_types_1.CodeActionKind.QuickFix,
        edit: {
            documentChanges: documentChanges,
        },
        isPreferred: true,
    };
}
exports.getGenerateSnippetCodeAction = getGenerateSnippetCodeAction;
//# sourceMappingURL=getGenerateSnippetCodeAction.js.map