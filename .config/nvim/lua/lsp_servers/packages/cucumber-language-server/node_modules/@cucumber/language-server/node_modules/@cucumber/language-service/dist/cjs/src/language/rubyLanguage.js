"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toStringOrRegExp = exports.NO_SLASHES = exports.rubyLanguage = void 0;
var helpers_js_1 = require("./helpers.js");
exports.rubyLanguage = {
    toParameterTypeName: function (node) {
        return (0, helpers_js_1.childrenToString)(node, helpers_js_1.NO_QUOTES);
    },
    toParameterTypeRegExps: function (node) {
        return toRegExps(node);
    },
    toStepDefinitionExpression: function (node) {
        return toStringOrRegExp(node);
    },
    defineParameterTypeQueries: [
        "\n(call\n  method: (constant) @method\n  arguments: (argument_list\n    [\n      (\n        (pair\n          key: (hash_key_symbol) @name-key\n          value: (string) @name\n        )\n        (pair\n          key: (hash_key_symbol) @regexp-key\n          value: [\n            (regex) \n            (string) \n            (array\n              [\n                (regex) \n                (string) \n              ]\n            )\n          ] @expression\n        )\n      )\n      (\n        (pair\n          key: (hash_key_symbol) @regexp-key\n          value: (regex) @expression\n        )\n        (pair\n          key: (hash_key_symbol) @name-key\n          value: [\n            (regex) \n            (string) \n            (array\n              [\n                (regex) \n                (string) \n              ]\n            )\n          ] @expression\n        )\n      )\n    ]\n  )\n  (#eq? @method \"ParameterType\")\n  (#eq? @name-key \"name\")\n  (#eq? @regexp-key \"regexp\")\n) @root\n",
    ],
    defineStepDefinitionQueries: [
        "\n(call\n  method: (constant) @method\n  arguments: (argument_list\n    [\n      (string) @expression\n      (regex) @expression\n    ]\n  )\n  (#match? @method \"(Given|When|Then)$\")\n) @root\n",
    ],
    snippetParameters: {
        int: { type: 'Integer' },
        float: { type: 'Float' },
        word: { type: 'String' },
        string: { type: 'String' },
        double: { type: 'Float' },
        bigdecimal: { type: 'BigDecimal' },
        byte: { type: 'Integer' },
        short: { type: 'Integer' },
        long: { type: 'Integer' },
        biginteger: { type: 'Integer' },
        '': { type: 'Object', name: 'arg' },
    },
    defaultSnippetTemplate: "\n{{ keyword }}('{{ expression }}') do |{{ #parameters }}{{ #seenParameter }}, {{ /seenParameter }}{{ name }}{{ /parameters }}|\n  // {{ blurb }}\nend\n",
};
function toRegExps(node) {
    if (node === null)
        throw new Error('node cannot be null');
    switch (node.type) {
        case 'regex':
        case 'string':
            return toStringOrRegExp(node);
        case 'array':
            return (0, helpers_js_1.filter)(node, function (child) { return child.type === 'regex'; }).map(toStringOrRegExp);
        default:
            throw new Error("Unexpected type: ".concat(node.type));
    }
}
var NO_SLASHES = function (child) { return child.type !== '/'; };
exports.NO_SLASHES = NO_SLASHES;
function toStringOrRegExp(node) {
    switch (node.type) {
        case 'regex': {
            var flags = '';
            var flag = void 0;
            var s = node.text;
            for (var i = s.length - 1; (flag = s[i]) !== '/'; i--) {
                // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags
                // https://ruby-doc.org/core-3.1.2/doc/regexp_rdoc.html#label-Options
                if (flag === 'i' || flag == 'o') {
                    flags = "".concat(flags).concat(flag);
                }
            }
            return new RegExp(unescapeString((0, helpers_js_1.childrenToString)(node, exports.NO_SLASHES)), flags);
        }
        case 'string':
            return unescapeString((0, helpers_js_1.childrenToString)(node, helpers_js_1.NO_QUOTES));
        default:
            throw new Error("Unexpected type: ".concat(node.type));
    }
}
exports.toStringOrRegExp = toStringOrRegExp;
function unescapeString(s) {
    return s.replace(/\\'/g, "'").replace(/\\"/g, '"');
}
//# sourceMappingURL=rubyLanguage.js.map