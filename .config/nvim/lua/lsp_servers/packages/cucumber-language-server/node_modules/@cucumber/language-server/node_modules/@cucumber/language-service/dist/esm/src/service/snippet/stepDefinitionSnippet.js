import mustache from 'mustache';
function toWords(expression) {
    return expression
        .replace(/{[^}]*}/g, ' ')
        .replace(/[^a-zA-Z_]+/g, ' ')
        .trim()
        .split(/\s+/);
}
const camelize = () => (text, render) => toWords(render(text))
    .map((word, i) => (i === 0 ? word.toLowerCase() : word[0].toUpperCase() + word.slice(1)))
    .join('');
const underscore = () => (text, render) => toWords(render(text))
    .map((word, i) => (i === 0 ? word : `_${word}`))
    .join('');
const capitalize = () => (text, render) => {
    const rendered = render(text);
    return rendered[0].toUpperCase() + rendered.slice(1);
};
const lowercase = () => (text, render) => {
    const rendered = render(text);
    return rendered[0].toLowerCase() + rendered.slice(1);
};
const blurb = 'Write code here that turns the phrase above into concrete actions';
export function stepDefinitionSnippet(keyword, generatedExpressions, mustacheTemplate, snippetParameters) {
    // TODO: Add the remaining ones as comments
    const generatedExpression = generatedExpressions[0];
    let _seenParameter = false;
    const context = {
        keyword: keyword.trim(),
        expression: generatedExpression.source,
        parameters: generatedExpression.parameterInfos.map((parameterInfo) => {
            const snippetParameter = snippetParameters[parameterInfo.name || ''];
            const name = (snippetParameter === null || snippetParameter === void 0 ? void 0 : snippetParameter.name) || parameterInfo.name || snippetParameters[''].name;
            const type = (snippetParameter === null || snippetParameter === void 0 ? void 0 : snippetParameter.type) || parameterInfo.name || snippetParameters[''].type;
            return {
                name: `${name}${parameterInfo.count === 1 ? '' : parameterInfo.count.toString()}`,
                type,
            };
        }),
        seenParameter() {
            try {
                return _seenParameter;
            }
            finally {
                _seenParameter = true;
            }
        },
        blurb,
        camelize,
        underscore,
        capitalize,
        lowercase,
    };
    return mustache.render(mustacheTemplate, context);
}
//# sourceMappingURL=stepDefinitionSnippet.js.map