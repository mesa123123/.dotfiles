"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildSuggestions = void 0;
var cucumber_expressions_1 = require("@cucumber/cucumber-expressions");
var buildSuggestionFromCucumberExpression_js_1 = require("./buildSuggestionFromCucumberExpression.js");
var buildSuggestionsFromRegularExpression_js_1 = require("./buildSuggestionsFromRegularExpression.js");
var helpers_js_1 = require("./helpers.js");
/**
 * Builds an array of {@link Suggestion} from steps and step definitions.
 *
 * @param registry
 * @param stepTexts
 * @param expressions
 * @param maxChoices
 */
function buildSuggestions(registry, stepTexts, expressions, maxChoices) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    if (maxChoices === void 0) { maxChoices = 10; }
    var suggestions = [];
    var parameterChoiceSets = {};
    var unmatchedStepTexts = new Set(stepTexts);
    try {
        for (var expressions_1 = __values(expressions), expressions_1_1 = expressions_1.next(); !expressions_1_1.done; expressions_1_1 = expressions_1.next()) {
            var expression = expressions_1_1.value;
            try {
                for (var stepTexts_1 = (e_2 = void 0, __values(stepTexts)), stepTexts_1_1 = stepTexts_1.next(); !stepTexts_1_1.done; stepTexts_1_1 = stepTexts_1.next()) {
                    var text = stepTexts_1_1.value;
                    var args = expression.match(text);
                    if (args) {
                        var parameterTypes = args.map(function (arg) { return arg.getParameterType(); });
                        for (var argIndex = 0; argIndex < args.length; argIndex++) {
                            var arg = args[argIndex];
                            var parameterType = parameterTypes[argIndex];
                            var key = (0, helpers_js_1.makeKey)(parameterType);
                            var choices = parameterChoiceSets[key];
                            if (!choices) {
                                parameterChoiceSets[key] = choices = new Set();
                            }
                            if (arg.group.value !== undefined)
                                choices.add(arg.group.value);
                        }
                        unmatchedStepTexts.delete(text);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (stepTexts_1_1 && !stepTexts_1_1.done && (_b = stepTexts_1.return)) _b.call(stepTexts_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (expressions_1_1 && !expressions_1_1.done && (_a = expressions_1.return)) _a.call(expressions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var parameterChoices = Object.fromEntries(Object.entries(parameterChoiceSets).map(function (_a) {
        var _b = __read(_a, 2), key = _b[0], choices = _b[1];
        return [
            key,
            __spreadArray([], __read(choices), false).sort().slice(0, maxChoices),
        ];
    }));
    try {
        for (var expressions_2 = __values(expressions), expressions_2_1 = expressions_2.next(); !expressions_2_1.done; expressions_2_1 = expressions_2.next()) {
            var expression = expressions_2_1.value;
            if (expression instanceof cucumber_expressions_1.CucumberExpression) {
                suggestions = suggestions.concat((0, buildSuggestionFromCucumberExpression_js_1.buildSuggestionFromCucumberExpression)(expression, registry, parameterChoices));
            }
            if (expression instanceof cucumber_expressions_1.RegularExpression) {
                suggestions = suggestions.concat((0, buildSuggestionsFromRegularExpression_js_1.buildSuggestionsFromRegularExpression)(expression, registry, stepTexts, parameterChoices));
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (expressions_2_1 && !expressions_2_1.done && (_c = expressions_2.return)) _c.call(expressions_2);
        }
        finally { if (e_3) throw e_3.error; }
    }
    try {
        for (var unmatchedStepTexts_1 = __values(unmatchedStepTexts), unmatchedStepTexts_1_1 = unmatchedStepTexts_1.next(); !unmatchedStepTexts_1_1.done; unmatchedStepTexts_1_1 = unmatchedStepTexts_1.next()) {
            var stepText = unmatchedStepTexts_1_1.value;
            suggestions.push({
                label: stepText,
                segments: [stepText],
                matched: false,
            });
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (unmatchedStepTexts_1_1 && !unmatchedStepTexts_1_1.done && (_d = unmatchedStepTexts_1.return)) _d.call(unmatchedStepTexts_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return suggestions.sort(function (a, b) { return a.label.localeCompare(b.label); });
}
exports.buildSuggestions = buildSuggestions;
//# sourceMappingURL=buildSuggestions.js.map