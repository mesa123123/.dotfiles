"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeParserAdapter = void 0;
// @ts-ignore
var tree_sitter_1 = __importStar(require("tree-sitter"));
// @ts-ignore
var tree_sitter_c_sharp_1 = __importDefault(require("tree-sitter-c-sharp"));
// @ts-ignore
var tree_sitter_java_1 = __importDefault(require("tree-sitter-java"));
// @ts-ignore
var tree_sitter_php_1 = __importDefault(require("tree-sitter-php"));
// @ts-ignore
var tree_sitter_python_1 = __importDefault(require("tree-sitter-python"));
// @ts-ignore
var tree_sitter_ruby_1 = __importDefault(require("tree-sitter-ruby"));
// @ts-ignore
var tree_sitter_rust_1 = __importDefault(require("tree-sitter-rust"));
// @ts-ignore
var tree_sitter_typescript_1 = __importDefault(require("tree-sitter-typescript"));
var NodeParserAdapter = /** @class */ (function () {
    function NodeParserAdapter() {
        this.parser = new tree_sitter_1.default();
    }
    NodeParserAdapter.prototype.query = function (source) {
        return new tree_sitter_1.Query(this.parser.getLanguage(), source);
    };
    NodeParserAdapter.prototype.setLanguageName = function (languageName) {
        switch (languageName) {
            case 'java':
                this.parser.setLanguage(tree_sitter_java_1.default);
                break;
            case 'tsx':
            case 'javascript':
                this.parser.setLanguage(tree_sitter_typescript_1.default.typescript);
                break;
            case 'c_sharp':
                this.parser.setLanguage(tree_sitter_c_sharp_1.default);
                break;
            case 'php':
                this.parser.setLanguage(tree_sitter_php_1.default);
                break;
            case 'ruby':
                this.parser.setLanguage(tree_sitter_ruby_1.default);
                break;
            case 'python':
                this.parser.setLanguage(tree_sitter_python_1.default);
                break;
            case 'rust':
                this.parser.setLanguage(tree_sitter_rust_1.default);
                break;
            default:
                throw new Error("Unsupported language: ".concat(languageName));
        }
    };
    NodeParserAdapter.prototype.init = function () {
        return Promise.resolve(undefined);
    };
    return NodeParserAdapter;
}());
exports.NodeParserAdapter = NodeParserAdapter;
//# sourceMappingURL=NodeParserAdapter.js.map