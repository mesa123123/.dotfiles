snippet template_shell "A Baseline Template for Shell Files" b
#!/bin/bash

# -----------
# [Author] $1 
#		[Summary] $2
# -----------


# ----/
# ----------- Global Script Variables ------------------
# ----/


# ----------- Version Subject Usage --------------------

VERSION=1.0.0
SUBJECT=$2
USAGE="Useage String Goes Here"

# ----------- Help Message --------------------------------

function display_help()
{
	cat << EOF
	"Proper use of this script is yet to be defined, in other words, you're up the creek without a paddle mate...." 
EOF
}

# ----/
# ----------- Script Arguement Processing --------------
# ----/

# ----------- Null Switches ----------------------------

if [ $# == 0 ]; then 
	echo $USAGE
	exit 1;
fi

# ---------- Postional Arguements ----------------------
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
	# If they've parsed a help parameter, give them the help message
	-h| --help)
	display_help	
	exit 0;
	;;
	# All other switches
	*)
	POSITIONAL+=("$1") # save it in an array for later
	shift # past argument
	;;
esac
done
# ----------- Postional Arguements End ----------------- 


# ----/
# ----------- Script Functions -------------------------
# ----/
# Docstrings to accompany the start of each script
# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line parameters and options
# ----/

# ----------- Script Functions End ---------------------


# ----/
# ----------- Script Business Logic --------------------
# ----/

# ----/
# ----------- Script Exit ------------------------------
# ----/

exit 0;
endsnippet

snippet shelltitle "The notation for creating a new section of a shell script" b
# ----/
# ----------- $1 -------------------------
# ----/




# ----------- $1 End ---------------------
endsnippet

snippet shellsubtitle "The notation for a custom subtitle" b
# ----------- $1 ------------------------------
endsnippet

snippet shellfunction "A docstring for shell functions" b
# $1
# DESC: $2 
# ARGS: $@ (optional): $3
# OUTS: $4
function $1()
{

}
endsnippet

snippet logfile "A setup for defining a log location" b
# Remove Previous Output File
if [ -f ./output.output ]; then
    rm ./output.output
fi
# Send all Outputs Timestamped To The Output Tmp File
exec 3>&1 4>&2 >./output.output 2>&1
endsnippet
		
