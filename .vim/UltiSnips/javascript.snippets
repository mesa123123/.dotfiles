############# MISC
snippet for "for" i
for ($1) {
  $2
}$3
endsnippet

snippet c "curly braces with identation" i
{
$1
}
endsnippet

snippet fn "named function" i
function $1($2) {
  $3
}$4
endsnippet

snippet ff "anonymous function" i
function($1) {
	$2
}$3
endsnippet

snippet af "arrow function" i
($1) => {
  $2
}$3
endsnippet

snippet fa "one line arrow function" i
($1) => $2
endsnippet

snippet cl "console.log(...)" i
console.log($1)
endsnippet

snippet clj "JSON.stringify formatted" i
console.log(JSON.stringify($1, null, 2))
endsnippet

snippet if "if statement" i
if ($1) {
	$2
}$3
endsnippet

snippet el "else statement" i
else {
  $1
}$2
endsnippet

snippet iife "Immediately-invoked function expression"
(function() {
	'use strict';

	$1
})();
endsnippet

############# Node.js
snippet re "require" b
const `!p
def formatVariableName(path):
if path == 'react/addons':
	return 'React'
lastPart = path.split('/')[-1]
if lastPart == 'lodash':
	return '_'
elif lastPart == 'jquery':
	return '$'
else:
	return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` = require('${1}')$0
endsnippet

snippet me "module.exports" b
module.exports = $0
endsnippet

snippet ee "exports"
exports = $0
endsnippet

snippet rr "just require"
require('$1')
endsnippet

snippet vr "ES5 require"
var $1 = require('$1')
endsnippet

############# JSDoc
snippet cm
/**
* ${0:${VISUAL}}
*/
endsnippet

snippet pr "@param {...}"
@param {${2:type}} ${1:name} - ${3:description}
endsnippet

snippet rt "@return {...}"
@return {${1:type}} - ${2:description}
endsnippet

snippet ct "@constructor"
@constructor
endsnippet

############# Tests
##### jest
snippet t "add jest test" i
test('$1', () => {
	$2
})
endsnippet

##### end jest

snippet ds "describe a test suite" b
describe('#$1', function() {
	$2
})
endsnippet

snippet it "describe a test" b
it('Should $1', function() {
	$2
})
endsnippet

snippet ae "afterEach" b
afterEach(function($1) {
	$2
})
endsnippet

snippet be "beforeEach" b
beforeEach(function($1) {
	$2
})
endsnippet

snippet ex "expect" b
expect($1).$2
endsnippet

############# ES6
snippet im "import" b
import `!p
def formatVariableName(path):
	if path == 'react':
		return 'React'
	lastPart = path.split('/')[-1]
	if lastPart == 'lodash':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub(r'[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` from '${1}'$0
endsnippet

snippet ed "export default"
export default $1
endsnippet
