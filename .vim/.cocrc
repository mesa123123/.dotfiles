" --------------------------------------------"
" Coc Options
" --------------------------------------------"
" CocConfig File
" --------
let g:coc_config_file="$HOME/.vim/coc-settings.json"
" Coc-Command Abbreviation
" --------
cabbrev ccc CocCommand
" Global Extensions
" --------
let g:coc_global_extensions = ['coc-prettier', 'coc-css', 'coc-docker', 'coc-html', 'coc-json', 'coc-markdownlint', 'coc-pyright', 'coc-solargraph', 'coc-toml', 'coc-tsserver', 'coc-ultisnips', 'coc-word', 'coc-yaml', 'coc-git', 'coc-rls', 'coc-go', 'coc-omnisharp']
" Recommended Options
" --------
" TextEdit might fail if hidden is not set.
set hidden
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup
" Give more space for displaying messages.
set cmdheight=2
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable delays and poor user experience.
set updatetime=200
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time diagnostics appear/become resolved.
if has("patch-8.1.1564")   
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
else
    set signcolumn=yes
endif
" Use tab for trigger completion with characters ahead and navigate. NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin before putting this into your config.
inoremap <silent><expr> <c-l>  pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr><c-h> pumvisible() ? "\<C-p>" : "\<C-h>"
" Make <CR> auto-select the first completion item and notify coc.nvim to format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() 
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction
" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" --------------------------------"
" Highlight Options
" --------------------------------"

" Error Dialogs
" --------
highlight CocErrorHighlight ctermfg=Red guifg=#cc5500
highlight CocErrorSign  ctermfg=Red guifg=#cc5500
highlight CocErrorFloat ctermfg=Red guifg=#cc5500

" Warning Dialogs
" --------
highlight CocWarningHighlight ctermfg=208 guifg=#fdda0d
highlight CocWarningSign  ctermfg=208 guifg=#fdda0d
highlight CocWarningFloat ctermfg=208 guifg=#fdda0d

" Info Dialogs
" --------
highlight CocInfoHighlight ctermfg=Gray guifg=#899499
highlight CocInfoSign  ctermfg=Gray guifg=#899499
highlight CocInfoFloat ctermfg=Gray guifg=#899499

" Hint Dialogs
" --------
highlight CocHintHighlight ctermfg=Green guifg=#dfff00
highlight CocHintSign  ctermfg=Green guifg=#dfff00
highlight CocHintFloat ctermfg=Green guifg=#dfff00

" --------------------------------"

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add a format all command
map <leader>F :call CocAction('format')<CR>

" Formatting selected code.
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

augroup mygroup
autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json,markdown setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap g= <Plug>(coc-codeaction-selected)<CR>
nmap g= <Plug>(coc-codeaction-selected)<CR>

" Adding Auto Import Resolution
autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')

" ----------------

